#!/bin/sh
# postrm script for ramlog
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postrm> `remove'
#        * <postrm> `purge'
#        * <old-postrm> `upgrade' <new-version>
#        * <new-postrm> `failed-upgrade' <old-version>
#        * <new-postrm> `abort-install'
#        * <new-postrm> `abort-install' <old-version>
#        * <new-postrm> `abort-upgrade' <old-version>
#        * <disappearer's-postrm> `disappear' <overwriter>
#          <overwriter-version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

[ "$ramlog_package_debug" = "1" ] && echo "ramlog 2.0.0 postrm: $@"

case "$1" in
    remove|abort-install|disappear)
	#if [ -f "/var/tmp/ramlog_upgrade_flag_file" ]; then
	#        rm "/var/tmp/ramlog_upgrade_flag_file"
	#	[ "$ramlog_package_debug" = "1" ] && echo "skipping postrm"
	#        exit 0
	#fi

	if [ ! -f /etc/init.d/ramlog ] && [ -f /etc/init.d/ramlog.uninst ]; then
        	cp /etc/init.d/ramlog.uninst /etc/init.d/ramlog
		#/etc/init.d/ramlog enable >/dev/null	#This is needed in case uninstall happens during reboot
	fi
	[ -f /etc/init.d/ramlog ] && /etc/init.d/ramlog disable
    ;;
    purge)
	if [ ! -f /etc/init.d/ramlog ] && [ -f /etc/init.d/ramlog.uninst ]; then
                cp /etc/init.d/ramlog.uninst /etc/init.d/ramlog
                #/etc/init.d/ramlog enable >/dev/null   #This is needed in case uninstall happens during reboot
        fi
        [ -f /etc/init.d/ramlog ] && /etc/init.d/ramlog uninstall2
    ;;
    upgrade|failed-upgrade|abort-upgrade)
    ;;
    *)
        echo "postrm called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.



exit 0


